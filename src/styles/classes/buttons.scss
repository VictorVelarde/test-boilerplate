/**
 * Buttons
 *
 *  <button class="btn md icon-text secondary">
 *    <Icon icon="icon-plus.svg" size="20px" fill="#48b07e"></Icon>
 *    <p>Button</p>
 *  </button>
 **/
 $sizes: (
  "small": (
    "types": (
      "icon",
      "text",
      "icon-text",
      "text-icon"
    ),
    "styles": (
      "primary",
      "secondary",
      "tertiary",
      "no-bg",
      "delete"
    ),
    "size": 24px,
    "padding": 0 8px,
    "text": (
      "size": 12px,
      "height": normal,
      "weight": normal
    )
  ),
  "default": (
    "types": (
      "icon",
      "text",
      "icon-text",
      "text-icon",
    ),
    "styles": (
      "primary",
      "secondary",
      "tertiary",
      "no-bg",
      "delete",
    ),
    "size": 36px,
    "padding": 0 16px,
    "icon-text-padding": 0 8px,
    "icon": 20px,
    "text": (
      "size": 14px,
      "height": normal,
      "weight": normal
    )
  ),
  "large": (
    "types": (
      "text",
      "icon-text",
      "text-icon"
    ),
    "styles": (
      "primary",
      "secondary",
      "tertiary",
      "no-bg",
      "delete"
    ),
    "size": 48px,
    "padding": 0 16px,
    "icon-text-padding": 0 8px,
    "icon": 20px,
    "text": (
      "size": 16px,
      "height": 1.25,
      "weight": normal
    )
  )
);
$styles: (
  "primary": (
    "background": $colorAccent,
    "border": $colorAccent,
    "hover": $colorAccentHover,
    "border-hover": $colorAccentHover,
    "color": $colorTop,
    "color-hover": $colorTop
  ),
  "secondary": (
    "background": $colorLow,
    "border": $colorLow,
    "hover": $colorVeryLow,
    "border-hover": $colorVeryLow,
    "color": $colorTop,
    "color-hover": $colorTop
  ),
  "tertiary": (
    "background": transparent,
    "border": $colorTop,
    "hover": $colorMediumHigh,
    "border-hover": $colorMediumHigh,
    "color": $colorTop,
    "color-hover": $colorLow
  ),
  "no-bg": (
    "background": transparent,
    "border": transparent,
    "hover": $colorVeryLow,
    "border-hover": $colorVeryLow,
    "color": $colorTop,
    "color-hover": $colorTop
  ),
  "delete": (
    "background": $colorFeedError,
    "border": $colorFeedError,
    "hover": #fb9b97,
    "border-hover": #fb9b97,
    "color": $colorTop,
    "color-hover": $colorTop
  ),
  "toggle": (
    "background": transparent,
    "border": $colorTop,
    "hover": $colorAccentHover,
    "border-hover": $colorTop,
    "color": $colorTop,
    "color-hover": $colorTop
  )
);
$border-radius: 0px;

@mixin acronim($acronim, $size, $types, $btn-styles, $map-styles) {
  &.#{$acronim} {
    border-radius: $border-radius;

    @include type($size, $types);

    @each $style-name in $btn-styles {
      $st: map-get($map-styles, $style-name);
      @include styles($style-name, $st);
    }

    @if $acronim == "cta" {
      & p {
        font-weight: bold; // TODO: set as prop
      }
    }
  }
}

@mixin type($size, $types) {
  @each $type in $types {
    &.#{$type} {
      @if $type == "icon" {
        align-items: center;
        justify-content: center;
        width: map-get($size, "size");
        height: map-get($size, "size");
      } @else {
        padding: map-get($size, "padding");
        width: auto;
        height: map-get($size, "size");
        
        $text: map-get($size, "text");
        
        @if $text {
          span {
            margin: 0;
            font-family: "Inter", sans-serif; // TODO: set as prop
            font-size: map-get($text, "size");
            line-height: map-get($text, "height");
            font-weight: map-get($text, "weight");
          }
        }
        
        
        @if $type == "icon-text" {
          padding: map-get($size, "icon-text-padding");

          & .icon-container {
            margin-right: 6px;
          }
        }

        @if $type == "text-icon" {
          padding: map-get($size, "icon-text-padding");

          & .icon-container {
            margin-left: 6px;
          }
        }
      }
    }
  }
}

@mixin styles($style-name, $btn-styles) {
  $bs: map-get($styles, $style-name) or null;

  @if $bs {
    $text: map-get($bs, "text") or null;

    &.#{$style-name} {
      border: 1px solid map-get($bs, "border");
      background: map-get($bs, "background");

      @if $text {
        justify-content: center;
      }

      & span {
        pointer-events: none;
        color: map-get($bs, "color");
        transition: color 0.25s ease;
      }
      
      & .icon-container {
        pointer-events: none;
        
        svg {
          fill: map-get($bs, "color");
        }
      }

      transition: border-color 0.25s ease, background-color 0.25s ease;

      &:hover {
        background: map-get($bs, "hover");
        border: 1px solid map-get($bs, "border-hover");

        & span {
          color: map-get($bs, "color-hover");
        }

        & .icon-container svg {
          fill: map-get($bs, "color-hover");
        }
      }
    }
  }
}

.btn {
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  margin: 0;
  border-radius: $border-radius;
  cursor: pointer;

  @each $acronim, $size in $sizes {
    $types: map-get($size, "types");
    $btn-styles: map-get($size, "styles");

    @include acronim($acronim, $size, $types, $btn-styles, $styles);
  }

  &.rounded {
    border-radius: 50%;
  }

  &.disabled {
    opacity: 0.4;
    pointer-events: none;
  }

  &.link {
    position: relative;
    width: auto;
    height: auto;

    &:after {
      content: "";
      position: absolute;
      width: 100%;
      height: 1px;
      left: 0;
      bottom: -2px;
      background-color: $colorAccent;
      opacity: 0;
      transition: opacity 0.25s ease;
    }
    
    &:hover {
      &:after {
        opacity: 1;
      }
    }
    
    span {
      margin: 0;
      font-family: sans-serif;
      font-size: 12px;
      line-height: 14px;
      font-weight: 500;
      color: $colorAccent;
    }
  }

  &.toggle {
    border-top: 1px solid map-get(map-get($styles, "toggle"), "border");
    border-bottom: 1px solid map-get(map-get($styles, "toggle"), "border");
    border-left: 1px solid map-get(map-get($styles, "toggle"), "border");
    background-color: map-get(map-get($styles, "toggle"), "background");
    transition: background-color 0.25s ease;
    
    & span {
      color: map-get(map-get($styles, "toggle"), "color");
      transition: color 0.25s ease;
    }


    &.active {
      background-color: map-get(map-get($styles, "toggle"), "hover");
      cursor: default;
      pointer-events: none;

      & span {
        color: map-get(map-get($styles, "toggle"), "color-hover");
      }

      & .icon-container svg {
        fill: map-get(map-get($styles, "toggle"), "color-hover");
      }
    }

    &:hover .icon-container svg {
      fill: map-get(map-get($styles, "toggle"), "color-hover");
    }

    &.text-icon {
      flex-direction: row-reverse;
    }

    &:not(:first-of-type),
    &:not(:last-of-type) {
      border-radius: 0;
      border-right: none;
      
      &:hover {
        border-right: none;
      }
    }
    
    &:first-of-type {
      border-top-left-radius: $border-radius;
      border-bottom-left-radius: $border-radius;
      border-left: 1px solid map-get(map-get($styles, "toggle"), "border");
      
      &:hover {
        border-left: 1px solid map-get(map-get($styles, "toggle"), "border-hover");
      }
    }
    
    &:last-of-type {
      border-right: 1px solid map-get(map-get($styles, "toggle"), "border");
      border-top-right-radius: $border-radius;
      border-bottom-right-radius: $border-radius;

      &:hover {
        border-right: 1px solid map-get(map-get($styles, "toggle"), "border-hover");
      }
    }
  }
}
